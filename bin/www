#!/usr/bin/env node
// require("dotenv").config();

/**
 * Module dependencies.
 */
const app = require('../app');
const debug = require('debug')(process.env.PROJ_NAME || 'project_name:server');
const http = require('http');
// const https = require('https');
const fs = require("fs");


/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);


/**
 * https Lets encrypt modules
 */
// const options = {
//   ca: fs.readFileSync('/etc/letsencrypt/live/dev.nufyn.io/fullchain.pem'),
//   key: fs.readFileSync('/etc/letsencrypt/live/dev.nufyn.io/privkey.pem'),
//   cert: fs.readFileSync('/etc/letsencrypt/live/dev.nufyn.io/cert.pem')
// };
// const server = https.createServer(options, app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// /**
//  * https greenlock modules
//  */
// require("greenlock-express")
//   .init({
//     //packageRoot를 정하는데 __dirname은 express-generator에서는 동작 X, "/../" 적용
//     packageRoot: __dirname + "/../",
//     configDir: "./greenlock.d",
//     // 보안 또는 심각한 버그 알림을 위한 연락용 이메일 작성
//     // 아래는 우리 도메인 메일
//     maintainerEmail: "domain@nufyn.com",
//     // 클라우드 스케일로 실행할 것인지 말것인지
//     cluster: false
//   })
//   // 80, 443으로 제공
//   .serve(app);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  };

  if (port >= 0) {
    // port number
    return port;
  };

  return false;
};

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  };

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  };
};

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
};
